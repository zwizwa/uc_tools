#lang s-expr "sm.rkt" ;; -*- scheme -*-

;; Subset of Scheme representing sm.h style protothreads.
;;
;; This is a test file with nonsense code that exercises all forms,
;; for visual inspection of code generation.  See test_csp.sm for a
;; real example.

;(let* ((a 123)
;       (b 345))
;      (add a b 1))

;; TODO:
;; - set!
;; - multi-arg tail calls

(define (fun1)
  (let*
      ((a
        (let* ((b (read chan1))
               (c (read chan1)))
          (add a ;; Free variable
               (add b c))))
       (d (read chan1))
       (e (let* ((x (add a (add 1 2)))
                 (y (add d 2)))
            (add x y)))
       (f (fun3 e))
       (g (let* ((l 5))
            (add f l)))
       (h (if g (add f g) (add f f)))
       )
    (send (add d h))
    (send e)
    (send f)
    (for ((i (in-range 3)))
      (send (add (read chan1) i)))
    
    ;; (if f (fun1) (fun2))
    (fun2)
    ))

(define (fun2)
  (let* ((abc 123)
         (def
          (select
           ;;((write 1 (add 1 2)) (write 1 123))
           ((write 1 abc) 123)
           ((read  0 v1)  (add 1 v1))
           )))
    ;;(select
    ;; ((read 0 v1)      (send 1 v1))
    ;; ((send 1 (+ 1 2)) (send 1 123)))
    (if (add def 0)
        (fun1)
        (fun2))
    ))

(define (fun3 x)
  (let*
      ((a (read chan2))
       (b (read chan2)))
    (add x (add a b))))




