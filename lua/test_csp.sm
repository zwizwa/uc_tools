#lang s-expr "sm.rkt" ;; -*- scheme -*-

;; Subset of Scheme representing sm.h style protothreads.
;;
;; This is a test file that (evetually should) compile(s) to testable
;; code.  See test.sm for a nonsense code example exercising all
;; forms.

;(let* ((a 123)
;       (b 345))
;      (add a b 1))

;; TODO:
;; - set!
;; - multi-arg tail calls

(define (fun1 x)
  (write 1 123)
  (let* ((a (read 0)))
    (write 1 a)
    (if (add a (read 0))
        (begin
          (write 1 a)
          (fun1 a))
        (fun2))))
  
(define (fun2)
  (let* ((abc 123)
         (def
          (select
           ;;((write 1 (add 1 2)) (write 1 123))
           ((write 1 abc) 123)
           ((read  0 v1)  (add 1 v1))
           )))
    ;;(select
    ;; ((read 0 v1)      (send 1 v1))
    ;; ((send 1 (+ 1 2)) (send 1 123)))
    (if (add def 0)
        (fun1 abc)
        (fun2))
    ))

;; The .sm language only allows function definitions in the module
;; form.  We do provide an 'entry point' with Scheme code that runs at
;; compile time.
(define (start)
  (spawn fun1 1 0)
  (spawn fun1 2 0)
  )








