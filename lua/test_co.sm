#lang s-expr "sm.rkt" ;; -*- scheme -*-

;; Test simpler co-routine abstraction.
;; Test application is a client and a server thread.

;; FIXME: this doesn't use channels.

(define (client serv)
  (define (main ign)
    (for ((i (in-range 10)))
      ;; 'rpc' gets inlined.  the 2 calls produce 4 blocking points.
      (let* ((x (co serv i))
             (y (co serv (add 100 i))))
        ;; 'yield' performs coroutine call to C end.
        (yield (add x y))))
    (main ign))
  main ;; entry point
  )

;; Inline + recursion error test.
(define (reca) (recb))
(define (recb) (recc))
(define (recc) (reca))

;; FIXME: use if

(define (server clnt)
  (define (add1 x) (add x 1)) ;; will be inlined
  (define (main prev_rpl)
    ;; Note that this is backwards!
    (let* ((req (co clnt prev_rpl))
           (rpl (add1 req)))
      (main rpl)))
  ;; (reca) ;; inline recursion error test
  ;; client will ignore the first "reply?
  ;; yeah coroutines are a bit raw...
  main)


;; See test1.sm for comments on semantics.

(define (start)
  (let* ((t1 (make-task))
         (t2 (make-task)))
    (load-task! t1 (server t2))
    (load-task! t2 (client t1))
    (co t1 0)
    ))
