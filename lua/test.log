==== test_csp.sh
Entering directory: /i/exo/uc_tools/lua
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
coroutine_resume: status=dead
cannot resume dead coroutine
stack traceback:
request: request1
reply: request1_reply
request: request2
reply: request2_reply
request: request3
reply: request3_reply
request: request4
reply: request4_reply
request: request5
reply: request5_reply
request: request6
reply: request6_reply
request: request7
reply: request7_reply
request: request8
reply: request8_reply
request: request9
reply: request9_reply
request: request10
reply: request10_reply
receiver data: data101
receiver data: data102
receiver data: data103
receiver data: data104
receiver data: data105
receiver data: data201
receiver data: data202
receiver data: data203
receiver data: data204
receiver data: data205
==== test_actor.sh
Entering directory: /i/exo/uc_tools/lua
sender start
receiver start
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
receiver data1: hello
receiver data2: hello
==== test_dataflow.sh
Entering directory: /i/exo/uc_tools/lua
test_dataflow.lua begin
- push in1 1
- push in2 2
out1 = 3
- push in3 3
out2 = 6
- push in1 4
out1 = 6
out2 = 9
- push in2 5
out1 = 9
out2 = 12
- push in3 6
out2 = 15
- push in3 6
test_dataflow.lua end
==== test_dfl.sh
Entering directory: /i/exo/uc_tools/lua
test_dfl.lua begin
- eval:
5
- dag:
{ 
  arity = 2,
  next_node = 6,
  nodes = { 
            {  }, 
            {  }, 
            { 
              opcode = "mul",
              operands = { 1, 1,  },
            }, 
            { 
              opcode = "mul",
              operands = { 2, 2,  },
            }, 
            { 
              opcode = "add",
              operands = { 3, 4,  },
            }, 
  },
  output = { 5,  },
  inputs = { 1, 2,  },
}
- code:
test_dfl.lua end
int testfun(void*_ctx, int r1, int r2) {
    int r3 = mul(_ctx, r1, r1)
    int r4 = mul(_ctx, r2, r2)
    int r5 = add(_ctx, r3, r4)
    return r5;
}
