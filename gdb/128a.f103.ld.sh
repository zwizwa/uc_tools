#!/bin/sh

# Variant of x8, for use with dual-partition firmware on 128k Flash STM32F103
#
# gdbstub:     0x08000000 - 0x08003000
# trampoline:  0x08003000 - 0x08004000
# partition a: 0x08004000 - 0x08012000 (both have 0x800 config + rest is firmware)
# partition b: 0x08012000 - 0x08020000

# Partitions might need to move if the trampoline doesn't fit: it has
# a CRC routine.

# See x8.f103.ld.sh for more information.

[ -z "$MAIN_LD" ] && MAIN_LD=$(dirname $0)/stm32f1.ld.sh
[ -z "$END_LD" ]  && END_LD=$(dirname $0)/stm32f1_end.ld.sh 

case $(basename $0) in
    x8b.f103.ld.sh)
        CONFIG=0x08012000
        ORIGIN=0x08012800
        # LENGTH=0xD800 # From ORIGIN to end of Flash
        LENGTH=0xD400 # Leave room for 1k log dump
        ;;
    *)
        CONFIG=0x08004000
        ORIGIN=0x08004800
        LENGTH=0xD800 # From ORIGIN to beginning of partition B
        ;;
esac

export CONFIG
export ORIGIN

# echo ORIGIN=$ORIGIN >&2

cat <<EOF

/* About rom LENGTH:
   This is the space between ORIGIN=$ORIGIN and the start of the next partition or the end of Flash.
   Note that the .control block is included in LENGTH (see e.g. stm32f1_end.ld.sh). */

/* GENERATED BY $(readlink -f $0) */

MEMORY /* STM32F103x8 */
{
        rom (rx)  : ORIGIN = $ORIGIN, LENGTH = $LENGTH
	ram (rwx) : ORIGIN = 0x20002000, LENGTH = 0x3000 /* 20kB total */
}

/* Most stm32f103 in the wild have 128k */
PROVIDE(_flash_top = 0x08020000);

/* This is to keep the linker happy.  main() is not used. */
PROVIDE(main = 0);

/* Fake entry point.  Apps are started manually through gdb RSP 
PROVIDE (_fake_reset_handler = 0);
ENTRY (_fake_reset_handler); */

ENTRY (reset_handler);


/* BEGIN: $MAIN_LD */

$($MAIN_LD)

/* END: $MAIN_LD */


/* BEGIN: $END_LD */

$($END_LD)

/* END: $END_LD */

EOF

